
import "./globals.css";
import styles from './layout.module.css'
import { Inter } from 'next/font/google'
import { Oswald } from "next/font/google";
import { Nanum_Gothic } from "next/font/google";

const inter = Inter({ subsets : ['latin']})

const oswald = Oswald({ subsets : ['latin']})

const gothic = Nanum_Gothic({ subsets : ['latin'], weight: "700"}) //가변폰트가 아닌 경우 굵기를 반드시 포함해야 한다.

//subsets : 웹 폰트에서 특정 문자만 불러오도록 지정하는 명령어(로딩시간 줄이기 위함)
//latin은 알파벳을 의미함(영어권, 유럽권)


/*
넥스트js에서 폰트와 구글폰트로 가져올때 차이점

구글 폰트
-link태그나 css에서 @import로 폰트를 추가할 수 있다.(cdn방식)
-네트워크 의존성 : google의 서버에서 폰트를 다운받아야 하므로 네트워크에 대한 지연이 발생할 수 있다.
해당 서버에 문제가 생기게 되면 폰트 로딩에 영향이 생기게 된다.

넥스트 폰트
-nextjs는 개발자가 원하는 폰트를 자체적으로 호스팅하고 이를 최적화 할 수 있게 기능을 제공
-외부 네트워크 의존성을 제거하므로 성능에 영향을 준다.

자동 폰트 최적화 : nextjs 10버전(현재 14버전)이상에서는 google font, typekit, fontshare를 제공해서 폰트를
자동으로 최적화 (폰트를 자동으로 사전에 로드하고, 최소한의 메모리를 사용해서 페이지 성능을 향상)

로딩 방법 : next.js는 font-display : optional 과 같은 css속성을 사용해서 foit또는 fout을 최소화 한다.

효율성  : 기본적인 웹 폰트 사용 시, 폰트의 스타일(weight, style)에 따라 별도의 파일을 로드해야 한다.
next.js에서 기본적으로 가변폰트를 제공한다.
*가변폰트 단일 폰트에서 여러가지 폰트 스타일을 조절할 수 있다.(굵기, 스타일을 말한다.)

유연성 : 디자이너와 개발자는 자유도 측면에서 넓은 범위로 폰트 스타일을 조절할 수 있으므로,
사용자 인터페이스의 세밀한 조정이 가능함(화면 크기나 사용자 설정에 따라 조절할 수 있다.)

성능 : 단일 파일에서 여러 스타일을 관리하기 때문에 로딩시간을 줄일 수 있다.

설정 방법 
1. 적용할 폰트 import() //https://fonts.google.com/variablefonts 참고
2. 변수에 폰트 적용 const oswald = Oswald({ subsets : ['latin']})
3. 적용할 요소에 폰트 적용 className={oswald.className}
4. 최상위 page나 layout에 설정하면 되며, 보통 layout파일에 적용하는 것을 선호
5. 특정 페이지나 컴포넌트에 적용하고 싶으면, 해당 폴더 내부에서 선언

*foit ( flash of invisible text)
-웹 폰트가 로드될때까지 전혀 보이지 않는 현상
이 현상은 폰트가 완전히 로드 될때까지 아무 텍스트도 볼 수 없으므로 로딩 시간에 따라 사용자 경험에 영향을 미칠 수 있다.

*fout( flash of unstyle text)
-웹 폰트가 로드되는 동안 사용자에게 시스템 폰트나 기본 폰트로 텍스트를 보여주는 현상
페이지는 먼저 텍스트를 랜더링 한 다음, 웹 폰트가 로드되면 텍스트에 웹폰트를 변경하는 방법을 사용
텍스트의 스타일이 갑자기 변경되어서 사용자가 이질감을 느낄 수 있다.

대체적으로 foit보다 fout을 더 선호하며, 사용자가 콘텐츠를 더 빨리 접할 수 있기 때문
*/

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <header className={styles.header}>
          <h1>logo</h1>
          <nav className={styles.gnb}>
            <ul>
              <li><a href="#">about</a></li>
              <li><a href="#">product</a></li>
            </ul>
          </nav>
        </header>

        {children}

        <footer className={styles.footer}>
          하단 정보
        </footer>
      </body>
    </html>
  );
}

/*
next.js에서 스타일을 적용하는 방법은 기존의 react의 방식과 거의 흡사하지만 postcss방식에서는 module방식을
활용의 폭이 더 넓어진다는 점이 다르다.

페이지마다 같은 파일명을 구분하기 때문에 module방식을 활용해서 이름을 고유하게 사용함으로써
컴포넌트 간에 스타일이 충돌하지 않도록 하기 위함이다. 개별 페이지마다 css를 따로 적용한다면
module.css를 사용한다.

그외에 전역스타일 선언의 경우 메인페이지이의 global.css에 추가하거나 하는 방식을 이용한다

*/
